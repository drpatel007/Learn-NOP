@using Nop.Web.Areas.Admin.CustomModels.Employees
@model EmployeeSearchModel

@using System.Globalization;
@using Nop.Core.Domain.Media

@inject MediaSettings _mediaSettings

@{
    //page title
    ViewBag.Title = T("Admin.Employees.Employees").Text;
    //active menu item (system name)
    Html.SetActiveMenuItemSystemName("Employees list");
}

@{
    const string hideSearchBlockAttributeName = "EmployeeListPage.HideSearchBlock";
    var hideSearchBlock = genericAttributeService.GetAttribute<bool>(workContext.CurrentCustomer, hideSearchBlockAttributeName);
}

<form asp-controller="Customer" asp-action="List" method="post">
    <div class="content-header clearfix">
        <h1 class="pull-left">
            @T("Admin.Employees.Employees")
        </h1>
        <div class="pull-right">
            <a asp-action="Create" class="btn bg-blue">
                <i class="fa fa-plus-square"></i>
                @T("Admin.Common.AddNew")
            </a>
            <div class="btn-group">
                <button type="button" class="btn btn-success">
                    <i class="fa fa-download"></i>
                    @T("Admin.Common.Export")
                </button>
                <button type="button" class="btn btn-success dropdown-toggle" data-toggle="dropdown" aria-expanded="false">
                    <span class="caret"></span>
                    <span class="sr-only">&nbsp;</span>
                </button>
                <ul class="dropdown-menu" role="menu">
                    <li>
                        <button type="submit" name="exportxml-all">
                            <i class="fa fa-file-code-o"></i>
                            @T("Admin.Common.ExportToXml.All")
                        </button>
                    </li>
                    <li>
                        <button type="button" id="exportxml-selected">
                            <i class="fa fa-file-code-o"></i>
                            @T("Admin.Common.ExportToXml.Selected")
                        </button>
                    </li>
                    <li class="divider"></li>
                    <li>
                        <button type="submit" name="exportexcel-all">
                            <i class="fa fa-file-excel-o"></i>
                            @T("Admin.Common.ExportToExcel.All")
                        </button>
                    </li>
                    <li>
                        <button type="button" id="exportexcel-selected">
                            <i class="fa fa-file-excel-o"></i>
                            @T("Admin.Common.ExportToExcel.Selected")
                        </button>
                    </li>
                </ul>
                @await Component.InvokeAsync("AdminWidget", new { widgetZone = AdminWidgetZones.CustomerListButtons })
            </div>
        </div>
    </div>

    <div class="content">
        <div class="form-horizontal">
            <div class="panel-group">

                <div class="panel panel-default">
                    <div class="panel-body">
                        @{
                            var gridModel = new DataTablesModel
                            {
                                Name = "employees-grid",
                                UrlRead = new DataUrl("EmployeeList", "Employee", null),
                                SearchButtonId = "search-employees",
                                Length = Model.PageSize,
                                LengthMenu = Model.AvailablePageSizes,
                                Filters = new List<FilterParameter>
                                {
                                    new FilterParameter(nameof(Model.SearchName)),
                                }
                            };

                            gridModel.ColumnCollection.Add(new ColumnProperty(nameof(EmployeeModel.Id))
                            {
                                IsMasterCheckBox = true,
                                Render = new RenderCheckBox("checkbox_employees"),
                                ClassName = NopColumnClassDefaults.CenterAll,
                                Width = "50",
                            });

                            gridModel.ColumnCollection.Add(new ColumnProperty(nameof(EmployeeModel.Email))
                            {
                                Title = T("Admin.Employees.Employees.Fields.Email").Text,
                                Width = "200"
                            });

                            gridModel.ColumnCollection.Add(new ColumnProperty(nameof(EmployeeModel.Name))
                            {
                                Title = T("Admin.Employees.Employees.Fields.Name").Text,
                                Width = "200"
                            });

                            gridModel.ColumnCollection.Add(new ColumnProperty(nameof(EmployeeModel.DateOfBirth))
                            {
                                Title = T("Admin.Employees.Employees.Fields.DateOfBirth").Text,
                                Width = "200"
                            });

                            gridModel.ColumnCollection.Add(new ColumnProperty(nameof(EmployeeModel.Salary))
                            {
                                Title = T("Admin.Employees.Employees.Fields.Salary").Text,
                                Width = "200",
                            });
                            gridModel.ColumnCollection.Add(new ColumnProperty(nameof(CustomerModel.Active))
                            {
                                Title = T("Admin.Employees.Employees.Fields.Active").Text,
                                Width = "100",
                                ClassName = NopColumnClassDefaults.CenterAll,
                                Render = new RenderBoolean()
                            });
                            gridModel.ColumnCollection.Add(new ColumnProperty(nameof(EmployeeModel.Id))
                            {
                                Title = T("Admin.Common.Edit").Text,
                                Width = "100",
                                ClassName = NopColumnClassDefaults.Button,
                                Render = new RenderButtonEdit(new DataUrl("Edit"))
                            });
                        }
                        @await Html.PartialAsync("Table", gridModel)
                    </div>
                </div>
            </div>
        </div>
    </div>
</form>

@*export selected (XML). We don't use GET approach because it's limited to 2K-4K chars and won't work for large number of entities*@
<form asp-controller="Employee" asp-action="ExportXmlSelected" method="post" id="export-xml-selected-form">
    <input type="hidden" id="selectedIds" name="selectedIds" value="" />
</form>
<script>
    $(document).ready(function () {
        $('#exportxml-selected').click(function (e) {
            e.preventDefault();
            var ids = selectedIds.join(",");
            $('#export-xml-selected-form #selectedIds').val(ids);
            $('#export-xml-selected-form').submit();
            updateTable('#employees-grid');
            return false;
        });
    });
</script>

@*export selected (Excel). We don't use GET approach because it's limited to 2K-4K chars and won't work for large number of entities*@
<form asp-controller="Employee" asp-action="ExportExcelSelected" method="post" id="export-excel-selected-form">
    <input type="hidden" id="selectedIds" name="selectedIds" value="" />
</form>
<script>
    $(document).ready(function () {
        $('#exportexcel-selected').click(function (e) {
            e.preventDefault();
            var ids = selectedIds.join(",");
            $('#export-excel-selected-form #selectedIds').val(ids);
            $('#export-excel-selected-form').submit();
            updateTable('#employees-grid');
            return false;
        });
    });
</script>